"""
Miscellaneous useful functions for PyOpenCL code
"""

import numpy as np
os.environ['PYTHONUNBUFFERED']='True'

__all__ = ['vprint','pick_seeds']

def vprint(verbose, *args, **kwargs):
    """
    Wrapper for print() with verbose flag to suppress output if desired
    
    Args:
        verbose  (bool): turn printing on or off
        *args (str): print() function args
        **kwargs (str): print() function keyword args
    """
    if verbose:
        print(*args, **kwargs)

def pick_seeds(mask=None, map=None, order=None, flag=None, pad=None):
    """
    Generate a vector array of seed points to send to the GPU/OpenCl device
    
    Args:
        mask (numpy.ndarray): pixel mask array
        map (numpy.ndarray):  mapping array (as generated by mapping())
        order (str): 'C' or 'F' for C (row-first) or Fortran (column-first) 
                     array ordering
        flag (bool): binary flag ORed with mapping array to pick seed pixels
        pad (int): grid boundary padding with in pixels
    
    Returns:
        numpy.ndarray: seed point array
    """
    if mask is None and map is not None:
        if order=='F':
            seed_point_array \
                = (np.argwhere(map & flag).astype(np.float32)-pad).T.copy(order=order)
        else:
            seed_point_array \
                = (np.argwhere(map & flag).astype(np.float32)-pad).copy(order=order)
    elif mask is not None and map is None:
        if order=='F':
            seed_point_array \
                = (np.argwhere(~mask).astype(np.float32)-pad).T.copy(order=order)
        else:
            seed_point_array \
                = (np.argwhere(~mask).astype(np.float32)-pad).copy(order=order)
    else:
        if order=='F':
            seed_point_array \
                = (np.argwhere(   ~mask & ((map & flag)>0)   ).astype(np.float32)
                   -pad).T.copy(order=order)
        else:
            seed_point_array \
                = (np.argwhere(   ~mask & ((map & flag)>0)   ).astype(np.float32)
                   -pad).copy(order=order)
    return seed_point_array
    